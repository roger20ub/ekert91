#:kivy 2.3.0


<Filter>:
    size: 300, 300
    canvas:
        Color:
            rgba: 0.75, 0.75, 0.75, 1
        Rectangle:
            pos: self.pos
            size: self.size

<Round_Button>: 
    background_disabled_normal: ''
    background_color: 0, 0, 0, 0
    canvas.before:
        Color:
            rgba: (0.75, 0.75, 0.75, 1) if self.state=='normal' else (0, 0.7, 0.7, 1)
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: [50,]


<Switch_Button>:
    background_disabled_normal: ''
    background_color: 0, 0, 0, 0
    canvas.before:
        Color:
            rgba: (0, 0.7, 0.7, 1) if self.active else (0.75, 0.75, 0.75, 1)
        Rectangle:
            pos: self.pos
            size: self.size


<Photon>:
    canvas:
        Color:
            rgba: 0.96, 0.90, 0.32, 1
        Ellipse:
            pos: self.pos
            size: self.size


<Slit>:
    canvas.before:                 
        PushMatrix
        Rotate:         
            angle: self.angle              
            origin: self.center
    canvas: 
        Color:
            rgba: 0, 0, 0, 1
        Rectangle:
            pos: self.pos
            size: self.size
    canvas.after:
        PopMatrix


<E91Simulation>:

    photon_alice: photon_alice
    photon_bob: photon_bob

    alice_filter: alice_filter
    bob_filter: bob_filter
    eve_left_filter: eve_left_filter
    eve_right_filter: eve_right_filter

    alice_slit: alice_slit
    bob_slit: bob_slit
    eve_left_slit: eve_left_slit
    eve_right_slit: eve_right_slit

    switch_eve: switch_eve
    switch_eve_left: switch_eve_left
    switch_eve_right: switch_eve_right
    switch_expert_mode: switch_expert_mode

    source: source
    slider: slider


    canvas.before:
        Color:
            rgba: 1, 1, 1, 1 
        Rectangle:
            pos: self.pos
            size: self.size


    Switch_Button:
        id: switch_eve 
        size: 100 * root.width / root.win_size[0], 30 * root.width / root.win_size[0]
        rgba: (0.75, 0.75, 0.75, 1) if self.active else (0, 0.7, 0.7, 1)
        center: root.center_x, root.center_y + 230 * root.width / root.win_size[0]
        on_press: self.change_mode(), tut_eve.change_mode()

        Label:
            color: 0, 0, 0, 1
            font_size: 20 * root.width / root.win_size[0] 
            center: self.parent.center
            text: "On" if self.parent.active else "Off"

        Label:
            id: eve_label
            color: 0, 0, 0, 1
            font_size: 37 * root.width / root.win_size[0] 
            center: self.parent.center_x, self.parent.top + 30 * root.width / root.win_size[0]
            text: "Eavesdropping"

        Label:
            color: 0, 0, 0, 1
            font_size: 70 * root.width / root.win_size[0] 
            center: root.center_x, root.center_y - 350 * root.width / root.win_size[0]
            text: "Eve" if self.parent.active else ''

    Switch_Button:
        id: switch_eve_left
        size: 100 * root.width / root.win_size[0], 30 * root.width / root.win_size[0]
        opacity: 1 if switch_eve.active else 0
        center: eve_left_filter.center_x, eve_left_filter.top + switch_eve_left.height / 2
        on_press: self.change_mode(), tut_eve_left.change_mode()

        Label:
            color: 0, 0, 0, 1
            font_size: 20 * root.width / root.win_size[0] 
            center: eve_left_filter.center_x, eve_left_filter.top + switch_eve_left.height / 2
            text: "On" if self.parent.active else "Off"

    Switch_Button:
        id: switch_eve_right
        size: 100 * root.width / root.win_size[0], 30 * root.width / root.win_size[0]
        opacity: 1 if switch_eve.active else 0
        center: eve_right_filter.center_x, eve_right_filter.top + switch_eve_right.height / 2
        on_press: self.change_mode(), tut_eve_right.change_mode()

        Label:
            color: 0, 0, 0, 1
            font_size: 20 * root.width / root.win_size[0] 
            center: eve_right_filter.center_x, eve_right_filter.top + switch_eve_right.height / 2
            text: "On" if self.parent.active else "Off"

    Switch_Button: 
        id: switch_expert_mode
        size: 100 * root.width / root.win_size[0], 30 * root.width / root.win_size[0]
        center: alice_filter.center_x, alice_filter.center_y + 410 * root.width / root.win_size[0]
        on_press: self.change_mode(), tut_eve_expert.change_mode()

        Label:
            color: 0, 0, 0, 1
            font_size: 20 * root.width / root.win_size[0] 
            center: alice_filter.center_x, alice_filter.center_y + 410 * root.width / root.win_size[0]
            text: "On" if self.parent.active else "Off"

        Label:
            color: 0, 0, 0, 1
            font_size: 30 * root.width / root.win_size[0]  
            center: switch_expert_mode.center_x, switch_expert_mode.top + 30 * root.width / root.win_size[0]
            text: "Expert Mode"

        Label:
            id: label_E_a1b1
            color: 0, 0, 0, 1
            opacity: 1 if self.parent.active else 0
            font_size: 30 * root.width / root.win_size[0]  
            center: alice_filter.center_x + alice_filter.width / 2 + self.width / 2, switch_expert_mode.center_y
            text: "E(a1,b1) = " + str(root.E_a1b1)

        Label:
            id: label_E_a1b3
            color: 0, 0, 0, 1
            opacity: 1 if self.parent.active else 0
            font_size: 30 * root.width / root.win_size[0]  
            center: alice_filter.center_x + alice_filter.width / 2 + self.width / 2 + 0.2 * (bob_filter.center_x - bob_filter.width / 2), switch_expert_mode.center_y
            text: "E(a1,b3) = " + str(root.E_a1b3)

        Label:
            id: label_E_a13b1
            color: 0, 0, 0, 1
            opacity: 1 if self.parent.active else 0
            font_size: 30 * root.width / root.win_size[0]  
            center: alice_filter.center_x + alice_filter.width / 2 + self.width / 2 + 0.4 * (bob_filter.center_x - bob_filter.width / 2), switch_expert_mode.center_y
            text: "E(a3,b1) = " + str(root.E_a3b1)

        Label:
            id: label_E_a3b3
            color: 0, 0, 0, 1
            opacity: 1 if self.parent.active else 0
            font_size: 30 * root.width / root.win_size[0]  
            center: alice_filter.center_x + alice_filter.width / 2 + self.width / 2 + 0.6 * (bob_filter.center_x - bob_filter.width / 2), switch_expert_mode.center_y
            text: "E(a3,b3) = " + str(root.E_a3b3)

        Label:
            color: 0, 0, 0, 1
            opacity: 1 if self.parent.active else 0
            font_size: 30 * root.width / root.win_size[0]  
            center: alice_filter.center_x + alice_filter.width / 2 + self.width / 2 + 0.8 * (bob_filter.center_x - bob_filter.width / 2), switch_expert_mode.center_y
            text: "S = " + str(root.S)

    
    Filter:
        id: alice_filter
        color: 0.75, 0.75, 0.75, 1
        size: 300 * root.width / root.win_size[0], 300 * root.width / root.win_size[0]
        center: 0.75 * self.width, root.center_y

        Label:
            color: 0, 0, 0, 1
            font_size: 70 * root.width / root.win_size[0] 
            center: alice_filter.center_x, alice_filter.center_y - 350 * root.width / root.win_size[0]
            text: "Alice" 

        Label:
            color: 0, 0, 0, 1
            font_size: 70 * root.width / root.win_size[0] 
            center: alice_filter.center_x, alice_filter.top + 120 * root.width / root.win_size[0]
            text: str(root.a_bit)

    Filter:
        id: bob_filter
        size: 300 * root.width / root.win_size[0], 300 * root.width / root.win_size[0]
        center: root.width - 0.75 * self.width, root.center_y 

        Label:
            color: 0, 0, 0, 1
            font_size: 70 * root.width / root.win_size[0] 
            center: bob_filter.center_x, bob_filter.center_y - 350 * root.width / root.win_size[0]
            text: "Bob"

        Label:
            color: 0, 0, 0, 1
            font_size: 70 * root.width / root.win_size[0] 
            center: bob_filter.center_x, bob_filter.top + 120 * root.width / root.win_size[0]
            text: str(root.b_bit)

    Filter:
        id: eve_left_filter
        size: 300 * root.width / root.win_size[0], 300 * root.width / root.win_size[0]
        opacity: 1 if (switch_eve.active and switch_eve_left.active) else 0
        center: 0.5 * (alice_filter.center_x + 0.5 * alice_filter.width  + root.center_x - 0.5 * source.width), root.center_y

        Label:
            color: 0, 0, 0, 1
            opacity: 1 if (switch_eve.active and switch_eve_left.active) else 0
            font_size: 70 * root.width / root.win_size[0] 
            center: eve_left_filter.center_x, eve_left_filter.top + 120 * root.width / root.win_size[0]
            text: str(root.e_left_bit)
        
    Filter:
        id: eve_right_filter
        size: 300 * root.width / root.win_size[0], 300 * root.width / root.win_size[0]
        opacity: 1 if (switch_eve.active and switch_eve_right.active) else 0
        center: 0.5 * (bob_filter.center_x - 0.5 * bob_filter.width + root.center_x + 0.5 * source.width), root.center_y

        Label:
            color: 0, 0, 0, 1
            opacity: 1 if (switch_eve.active and switch_eve_right.active) else 0
            font_size: 70 * root.width / root.win_size[0] 
            center: eve_right_filter.center_x, eve_right_filter.top + 120 * root.width / root.win_size[0]
            text: str(root.e_right_bit)


    Slit:
        id: alice_slit
        size: 0.85 * alice_filter.width, alice_filter.height / 45
        center: alice_filter.center_x, root.center_y 

    Slit:
        id: bob_slit
        size: 0.85 * bob_filter.width, bob_filter.height / 45
        center: bob_filter.center_x, root.center_y

    Slit:
        id: eve_left_slit
        size: 0.85 * eve_left_filter.width, eve_left_filter.height / 45
        opacity: 1 if (switch_eve.active and switch_eve_left.active) else 0
        center: eve_left_filter.center_x, root.center_y

    Slit:
        id: eve_right_slit
        size: 0.85 * eve_right_filter.width, eve_right_filter.height / 45
        opacity: 1 if (switch_eve.active and switch_eve_right.active) else 0
        center: eve_right_filter.center_x, root.center_y


    Round_Button:
        id: alice_button
        size: 60 * root.width / root.win_size[0], 60 * root.width / root.win_size[0]
        center: alice_filter.center_x + 0.5 * alice_filter.width - 0.6 * self.width, root.center_y - 0.5 * alice_filter.width - 1.2 * self.height
        on_press: alice_slit.change_left_angles(), tut_emmited.change_mode(), tut_alice_bit.change_mode(), tut_bob_bit.change_mode(), tut_alice_button.change_mode()

        Label:
            id: alice_angle
            color: 0, 0, 0, 1
            font_size: 60 * root.width / root.win_size[0]
            center: alice_filter.center_x - 25 * root.width / root.win_size[0], root.center_y - alice_filter.width / 2 - 1.2 * alice_button.height
            text: str(alice_slit.angle) + " º"

    Round_Button:
        id: bob_button
        size: 60 * root.width / root.win_size[0], 60 * root.width / root.win_size[0]
        center: bob_filter.center_x + 0.5 * bob_filter.width - 0.6 * self.width, root.center_y - 0.5 * bob_filter.width - 1.2 * self.height
        on_press: bob_slit.change_right_angles(), tut_bob_button.change_mode()

        Label:
            id: bob_angle
            color: 0, 0, 0, 1
            font_size: 60 * root.width / root.win_size[0]
            center: bob_filter.center_x - 25 * root.width / root.win_size[0], root.center_y - 0.5 * alice_filter.width - 1.2 * bob_button.height
            text: str(bob_slit.angle) + " º"

    Round_Button:
        id: eve_left_button
        size: 60 * root.width / root.win_size[0], 60 * root.width / root.win_size[0]
        opacity: 1 if (switch_eve.active and switch_eve_left.active) else 0
        center: eve_left_filter.center_x + 0.5 * eve_left_filter.width - 0.6 * self.width, root.center_y - 0.5 * eve_left_filter.width - 1.2 * self.height
        on_press: eve_left_slit.change_left_angles()

        Label:
            id: eve_left_angle
            color: 0, 0, 0, 1
            font_size: 60 * root.width / root.win_size[0]
            opacity: 1 if (switch_eve.active and switch_eve_left.active) else 0
            center: eve_left_filter.center_x - 25 * root.width / root.win_size[0], root.center_y - 0.5 * alice_filter.width - 1.2 * eve_left_button.height
            text: str(eve_left_slit.angle) + " º"

    Round_Button:
        id: eve_right_button
        size: 60 * root.width / root.win_size[0], 60 * root.width / root.win_size[0]
        opacity: 1 if (switch_eve.active and switch_eve_right.active) else 0
        center: eve_right_filter.center_x + 0.5 * eve_right_filter.width - 0.6 * self.width, root.center_y - 0.5 * eve_right_filter.width - 1.2 * self.height
        on_press: eve_right_slit.change_right_angles()

        Label:
            id: eve_right_angle
            color: 0, 0, 0, 1
            font_size: 60 * root.width / root.win_size[0]
            opacity: 1 if (switch_eve.active and switch_eve_right.active) else 0
            center: eve_right_filter.center_x - 25 * root.width / root.win_size[0], root.center_y - 0.5 * alice_filter.width - 1.2 * eve_right_button.height
            text: str(eve_right_slit.angle) + " º"


    Photon:
        id: photon_alice
        size: 20 * root.width / root.win_size[0], 20 * root.width / root.win_size[0]
        center: root.center

    Photon:
        id: photon_bob
        size: 20 * root.width / root.win_size[0], 20 * root.width / root.win_size[0]
        center: root.center


    Round_Button:
        id: source
        size: 70 * root.width / root.win_size[0], 70 * root.width / root.win_size[0]
        center: root.center
        on_press: root.emission(), tut_press_source.change_mode()

        

        Label:
            id: label_source 
            color: 0, 0, 0, 1
            font_size: 45 * root.width / root.win_size[0] 
            center: source.center_x, source.center_y - 70 * root.width / root.win_size[0]
            text: "Source"


    Slider:
        id: slider
        min: 1
        max: 1000
        step: 1
        value_track: True
        value_track_color: [0.175, 0.332, 0.999, 1]
        size: 170 * root.width / root.win_size[0], 40 * root.width / root.win_size[0]
        cursor_size: (20 * root.width / root.win_size[0], 20 * root.width / root.win_size[0])
        center: root.center_x, label_source.center_y - 30 * root.width / root.win_size[0]
        on_touch_move: tut_slider.change_mode()
    
        Label:
            color: 0, 0, 0, 1
            font_size: 16 * root.width / root.win_size[0]
            center: slider.center_x, slider.center_y - 20
            text: str(slider.value)


    Tutorial_Label:
        id: tut_press_source
        color: [0.175, 0.332, 0.999, 1]
        opacity: 1 if self.active else 0
        font_size: 22 * root.width / root.win_size[0]
        center: root.center_x, source.top + 30
        text: "Press me!"

    Tutorial_Label:
        id: tut_emmited
        color: [0.175, 0.332, 0.999, 1]
        opacity: 1 if self.active and tut_press_source.active==False  else 0
        font_size: 22 * root.width / root.win_size[0]
        center: root.center_x, source.top + 30
        text: "You have emitted a pair of photons!"

    Tutorial_Label:
        id: tut_alice_bit
        color: [0.175, 0.332, 0.999, 1]
        opacity: 1 if self.active and tut_press_source.active==False else 0
        font_size: 22 * root.width / root.win_size[0]
        center: alice_filter.center_x + self.width + 20 * root.width / root.win_size[0], alice_filter.top + 120 * root.width / root.win_size[0]
        text: "Here Alice's bit!"

    Tutorial_Label:
        id: tut_bob_bit
        color: [0.175, 0.332, 0.999, 1]
        opacity: 1 if self.active and tut_press_source.active==False else 0
        font_size: 22 * root.width / root.win_size[0]
        center: bob_filter.center_x - self.width - 20 * root.width / root.win_size[0], bob_filter.top + 120 * root.width / root.win_size[0]
        text: "Here Bobs's bit!"

    Tutorial_Label:
        id: tut_alice_button
        color: [0.175, 0.332, 0.999, 1]
        opacity: 1 if self.active and tut_press_source.active==False else 0
        font_size: 22 * root.width / root.win_size[0]
        center: alice_filter.center_x + alice_filter.width + 0.5 * self.width, root.center_y - 0.5 * alice_filter.width - 1.2 * alice_button.height
        text: "Press here to change Alice's basis"

    Tutorial_Label:
        id: tut_bob_button
        color: [0.175, 0.332, 0.999, 1]
        opacity: 1 if self.active and tut_alice_button.active==False else 0
        font_size: 22 * root.width / root.win_size[0]
        center: bob_filter.center_x - 0.5 * bob_filter.width - 1.5 * self.width, root.center_y - 0.5 * bob_filter.width - 1.2 * bob_button.height
        text: "And here to change Bob's basis"

    Tutorial_Label:
        id: tut_eve
        color: [0.175, 0.332, 0.999, 1]
        opacity: 1 if self.active and tut_bob_button.active==False else 0
        font_size: 22 * root.width / root.win_size[0]
        center: eve_label.center_x, eve_label.center_y - 85 * root.width / root.win_size[0]
        text: "Press here to add an eavesdropper"

    Tutorial_Label:
        id: tut_eve_left
        color: [0.175, 0.332, 0.999, 1]
        opacity: 1 if self.active and tut_eve.active==False else 0
        font_size: 22 * root.width / root.win_size[0]
        center: switch_eve_left.center_x, switch_eve_left.top + 20 * root.width / root.win_size[0]
        text: "Eve can hear from the left"

    Tutorial_Label:
        id: tut_eve_right
        color: [0.175, 0.332, 0.999, 1]
        opacity: 1 if self.active and tut_eve_left.active==False else 0
        font_size: 22 * root.width / root.win_size[0]
        center: switch_eve_right.center_x, switch_eve_right.top + 20 * root.width / root.win_size[0]
        text: "And from the right"

    Tutorial_Label:
        id: tut_slider
        color: [0.175, 0.332, 0.999, 1]
        opacity: 1 if self.active and tut_eve_right.active==False else 0
        font_size: 18 * root.width / root.win_size[0]
        center: slider.center_x, slider.center_y - 70 * root.width / root.win_size[0]
        halign: "left"
        valign: "top"
        text: "Slide to choose how many \n            pairs you send"

    Tutorial_Label:
        id: tut_eve_expert
        color: [0.175, 0.332, 0.999, 1]
        opacity: 1 if self.active and tut_slider.active==False else 0
        font_size: 22 * root.width / root.win_size[0]
        center: switch_expert_mode.center_x, switch_expert_mode.center_y - 40 * root.width / root.win_size[0]
        text: "Press here for details"